name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
        - 'app/**' 
  workflow_dispatch: 
    
jobs:
  build:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          echo "INVESTIDOR10_API_ACOES=${{ secrets.INVESTIDOR10_API_ACOES }}" >> .env
          echo "INVESTIDOR10_API_NETGROWTH=${{ secrets.INVESTIDOR10_API_NETGROWTH }}" >> .env

      - name: Login to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fast-api-ec2:latest

  deploy:
    needs: build
    name: Deploy Infra
    runs-on: ubuntu-latest

    steps:
      - name: "Configure AWS Credentials" 
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: sa-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - name: Generate backend-config.hcl (Frontend)
        working-directory: terraform
        run: |
          cat <<EOF > backend-config.hcl
          bucket         = "${{ secrets.S3_REMOTE }}"
          key            = "terraform.tfstate"
          region         = "sa-east-1"
          dynamodb_table = "${{ secrets.STATE_LOCK_FRONT }}"
          encrypt        = true
          EOF

      - name: Generate terraform.tfvars
        working-directory: terraform
        run: |
          cat <<EOF > terraform.tfvars
          acm_certificate_arn = "${{ secrets.CM_CERTIFICATE_ARN }}"
          hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
          route53_record_name = "${{ secrets.ROUTE53_RECORD_NAME }}"
          route53_record_value = "${{ secrets.ROUTE53_RECORD_VALUE }}"
          EOF

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -backend-config="backend-config.hcl"

      - name: Plan Terraform Changes
        working-directory: terraform
        run: terraform plan -lock=false

      - name: Apply Terraform
        working-directory: terraform
        run: terraform apply -auto-approve -lock=false

      # - name: SSH and Update Container
      #   working-directory: terraform
      #   run: |
      #     echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ./keys/id_rsa
      #     chmod 600 ./keys/id_rsa  # Critical permission!

      #     IP=$(terraform output -raw instance_public_ip)
      #     echo "EC2 Public IP: $IP"
      #     if [ -z "$IP" ]; then
      #       echo "Error: Failed to get EC2 IP!"
      #       exit 1
      #     fi
      
      #     ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ./keys/id_rsa ubuntu@$IP "
      #     sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fast-api-ec2:latest && \
      #     sudo docker stop \$(sudo docker ps -q --filter ancestor=${{ secrets.DOCKERHUB_USERNAME }}/fast-api-ec2) || true && \
      #     sudo docker run -d -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/fast-api-ec2:latest
      
      #     rm -f ./keys/id_rsa